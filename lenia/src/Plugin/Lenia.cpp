///
/// Lenia.cpp
///

#include <Plugin/Lenia.hh>
#include <iomanip>

static void doubleToRGB(double value, int &R, int &G, int &B)
{
    value = std::max(0.0, std::min(1.0, value));

    if (value < 0.5) {
        R = 0;
        G = static_cast<int>(255 * (value * 2));
        B = 255;
    } else {
        R = static_cast<int>(255 * ((value - 0.5) * 2));
        G = static_cast<int>(255 * (1.0 - (value - 0.5) * 2));
        B = 0;
    }
}

static void printColoredDouble(double value, bool mult)
{
    int R, G, B;
    doubleToRGB(value, R, G, B);

    std::cout << "\033[38;2;" << R << ";" << G << ";" << B << "m" << std::fixed
              << std::setprecision(mult ? 5 : 0) << value << "\033[0m";
}

static void printMatrix(std::vector<std::vector<double>> matrix, bool mult = false)
{
    for (size_t i = 0; i < matrix.size(); ++i) {
        for (size_t j = 0; j < matrix[i].size(); ++j) {
            printColoredDouble(matrix[i][j], mult);
            std::cout << " ";
        }
        std::cout << std::endl;
        // for (size_t j = 0; j < matrix[0].size(); ++j) {
        //     std::cout << " ";
        //     printColoredDouble(matrix[i][j] * (mult ? 100 : 1));
        // }
        // std::cout << std::endl;
    }
    std::cout << std::endl;
}

std::vector<std::vector<double>> PLC::Lenia::createKernel(int R, double mu, double sigma)
{
    int size = 2 * R;
    std::vector<std::vector<double>> y(size, std::vector<double>(1));
    std::vector<std::vector<double>> x(1, std::vector<double>(size));
    std::vector<std::vector<double>> distance(size, std::vector<double>(size));
    std::vector<std::vector<double>> result(size, std::vector<double>(size));
    double sum = 0.0;

    for (int i = 0; i < size; i++) {
        y[i][0] = i - R;
        x[0][i] = i - R;
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            distance[i][j] = std::sqrt(std::pow(1 + x[0][j], 2) + std::pow(1 + y[i][0], 2)) / R;
            result[i][j] = gauss(distance[i][j], mu, sigma);
            if (distance[i][j] > 1) {
                result[i][j] = 0;
            }
        }
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            sum += result[i][j];
        }
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            result[i][j] /= sum;
        }
    }

    return result;
}

std::vector<std::vector<double>> PLC::Lenia::growthLenia(const std::vector<std::vector<double>> u)
{
    size_t r_size = u.size();
    size_t c_size = u[0].size();
    std::vector<std::vector<double>> result(r_size, std::vector<double>(c_size, 0.0));

    for (size_t i = 0; i < r_size; ++i) {
        for (size_t j = 0; j < c_size; ++j) {
            result[i][j] = -1.0 + 2.0 * gauss(u[i][j], this->mu, this->sigma);
        }
    }
    return result;
}

PLC::Lenia::Lenia()
{
    // std::ifstream inputFile("../assets/init.json");
    // if (!inputFile.is_open()) {
    //     std::cerr << "Erreur lors de l'ouverture du fichier JSON." << std::endl;
    //     return;
    // }
    // nlohmann::json j;
    // inputFile > > j;

    // this->tab = j["tab"].get<std::vector<std::vector<double> >>();
    // this->kernel = this->createKernel(this->tab = j["r"].get<size_t>(), j["kMu"].get<double>(),
    // j["kSigma"].get<double>()); this->mu = j["mu"].get<double>(); this->sigma =
    // j["sigma"].get<double>(); this->time = j["time"].get<double>();

    this->tab = {
        {0, 0, 0, 0, 0, 0, 0.1, 0.14, 0.1, 0, 0, 0.03, 0.03, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0,   0,    0,   0, 0, 0,    0,    0, 0, 0,   0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0,   0,    0,   0, 0, 0,    0,    0, 0, 0,   0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0.08, 0.24, 0.3, 0.3, 0.18, 0.14, 0.15, 0.16, 0.15, 0.09, 0.2, 0,
         0, 0, 0, 0, 0, 0,    0,    0,   0,   0,    0,    0,    0,    0,    0,    0,   0,
         0, 0, 0, 0, 0, 0,    0,    0,   0,   0,    0,    0,    0,    0,    0,    0,   0,
         0, 0, 0, 0, 0, 0,    0,    0,   0,   0,    0,    0,    0,    0,    0,    0,   0},
        {0, 0, 0, 0, 0, 0.15, 0.34, 0.44, 0.46, 0.38, 0.18, 0.14, 0.11, 0.13, 0.19, 0.18, 0.45,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
        {0, 0, 0, 0, 0.06, 0.13, 0.39, 0.5, 0.5, 0.37, 0.06, 0, 0, 0, 0.02, 0.16, 0.68,
         0, 0, 0, 0, 0,    0,    0,    0,   0,   0,    0,    0, 0, 0, 0,    0,    0,
         0, 0, 0, 0, 0,    0,    0,    0,   0,   0,    0,    0, 0, 0, 0,    0,    0,
         0, 0, 0, 0, 0,    0,    0,    0,   0,   0,    0,    0, 0, 0, 0,    0,    0},
        {0,    0, 0, 0.11, 0.17, 0.17, 0.33, 0.4, 0.38, 0.28, 0.14, 0, 0, 0, 0, 0, 0.18,
         0.42, 0, 0, 0,    0,    0,    0,    0,   0,    0,    0,    0, 0, 0, 0, 0, 0,
         0,    0, 0, 0,    0,    0,    0,    0,   0,    0,    0,    0, 0, 0, 0, 0, 0,
         0,    0, 0, 0,    0,    0,    0,    0,   0,    0,    0,    0, 0, 0, 0, 0, 0},
        {0,    0, 0.09, 0.18, 0.13, 0.06, 0.08, 0.26, 0.32, 0.32, 0.27, 0, 0, 0, 0, 0, 0,
         0.82, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 0, 0, 0, 0, 0,
         0,    0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 0, 0, 0, 0, 0,
         0,    0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0, 0, 0, 0, 0, 0},
        {0.27, 0,    0.16, 0.12, 0, 0, 0, 0.25, 0.38, 0.44, 0.45, 0.34, 0, 0, 0, 0, 0,
         0.22, 0.17, 0,    0,    0, 0, 0, 0,    0,    0,    0,    0,    0, 0, 0, 0, 0,
         0,    0,    0,    0,    0, 0, 0, 0,    0,    0,    0,    0,    0, 0, 0, 0, 0,
         0,    0,    0,    0,    0, 0, 0, 0,    0,    0,    0,    0,    0, 0, 0, 0, 0},
        {0, 0.07, 0.2, 0.02, 0, 0, 0, 0.31, 0.48, 0.57, 0.6, 0.57, 0, 0, 0, 0, 0,
         0, 0.49, 0,   0,    0, 0, 0, 0,    0,    0,    0,   0,    0, 0, 0, 0, 0,
         0, 0,    0,   0,    0, 0, 0, 0,    0,    0,    0,   0,    0, 0, 0, 0, 0,
         0, 0,    0,   0,    0, 0, 0, 0,    0,    0,    0,   0,    0, 0, 0, 0, 0},
        {0, 0.59, 0.19, 0, 0, 0, 0, 0.2, 0.57, 0.69, 0.76, 0.76, 0.49, 0, 0, 0, 0,
         0, 0.36, 0,    0, 0, 0, 0, 0,   0,    0,    0,    0,    0,    0, 0, 0, 0,
         0, 0,    0,    0, 0, 0, 0, 0,   0,    0,    0,    0,    0,    0, 0, 0, 0,
         0, 0,    0,    0, 0, 0, 0, 0,   0,    0,    0,    0,    0,    0, 0, 0, 0},
        {0, 0.58, 0.19, 0, 0, 0, 0, 0, 0.67, 0.83, 0.9, 0.92, 0.87, 0.12, 0, 0, 0,
         0, 0.22, 0.07, 0, 0, 0, 0, 0, 0,    0,    0,   0,    0,    0,    0, 0, 0,
         0, 0,    0,    0, 0, 0, 0, 0, 0,    0,    0,   0,    0,    0,    0, 0, 0,
         0, 0,    0,    0, 0, 0, 0, 0, 0,    0,    0,   0,    0,    0,    0, 0, 0},
        {0, 0, 0.46, 0, 0, 0, 0, 0, 0.7, 0.93, 1, 1, 1, 0.61, 0, 0, 0, 0, 0.18, 0.11, 0, 0, 0,
         0, 0, 0,    0, 0, 0, 0, 0, 0,   0,    0, 0, 0, 0,    0, 0, 0, 0, 0,    0,    0, 0, 0,
         0, 0, 0,    0, 0, 0, 0, 0, 0,   0,    0, 0, 0, 0,    0, 0, 0, 0, 0,    0,    0, 0},
        {0, 0, 0.82, 0, 0, 0, 0, 0, 0.47, 1, 1, 0.98, 1, 0.96, 0.27, 0, 0, 0, 0.19, 0.1, 0, 0, 0,
         0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0,    0, 0,    0,    0, 0, 0, 0,    0,   0, 0, 0,
         0, 0, 0,    0, 0, 0, 0, 0, 0,    0, 0, 0,    0, 0,    0,    0, 0, 0, 0,    0,   0, 0},
        {0,   0,    0.46, 0, 0, 0, 0, 0, 0.25, 1, 1, 0.84, 0.92, 0.97, 0.54, 0.14, 0.04,
         0.1, 0.21, 0.05, 0, 0, 0, 0, 0, 0,    0, 0, 0,    0,    0,    0,    0,    0,
         0,   0,    0,    0, 0, 0, 0, 0, 0,    0, 0, 0,    0,    0,    0,    0,    0,
         0,   0,    0,    0, 0, 0, 0, 0, 0,    0, 0, 0,    0,    0,    0,    0,    0},
        {0,    0,   0,    0.4, 0, 0, 0, 0, 0.09, 0.8, 1, 0.82, 0.8, 0.85, 0.63, 0.31, 0.18,
         0.19, 0.2, 0.01, 0,   0, 0, 0, 0, 0,    0,   0, 0,    0,   0,    0,    0,    0,
         0,    0,   0,    0,   0, 0, 0, 0, 0,    0,   0, 0,    0,   0,    0,    0,    0,
         0,    0,   0,    0,   0, 0, 0, 0, 0,    0,   0, 0,    0,   0,    0,    0,    0},
        {0,    0,    0, 0.36, 0.1, 0, 0, 0, 0.05, 0.54, 0.86, 0.79, 0.74, 0.72, 0.6, 0.39, 0.28,
         0.24, 0.13, 0, 0,    0,   0, 0, 0, 0,    0,    0,    0,    0,    0,    0,   0,    0,
         0,    0,    0, 0,    0,   0, 0, 0, 0,    0,    0,    0,    0,    0,    0,   0,    0,
         0,    0,    0, 0,    0,   0, 0, 0, 0,    0,    0,    0,    0,    0,    0,   0,    0},
        {0,    0,    0, 0.01, 0.3, 0.07, 0, 0, 0.08, 0.36, 0.64, 0.7, 0.64, 0.6, 0.51, 0.39, 0.29,
         0.19, 0.04, 0, 0,    0,   0,    0, 0, 0,    0,    0,    0,   0,    0,   0,    0,    0,
         0,    0,    0, 0,    0,   0,    0, 0, 0,    0,    0,    0,   0,    0,   0,    0,    0,
         0,    0,    0, 0,    0,   0,    0, 0, 0,    0,    0,    0,   0,    0,   0,    0,    0},
        {0,    0, 0, 0, 0.1, 0.24, 0.14, 0.1, 0.15, 0.29, 0.45, 0.53, 0.52, 0.46, 0.4, 0.31, 0.21,
         0.08, 0, 0, 0, 0,   0,    0,    0,   0,    0,    0,    0,    0,    0,    0,   0,    0,
         0,    0, 0, 0, 0,   0,    0,    0,   0,    0,    0,    0,    0,    0,    0,   0,    0,
         0,    0, 0, 0, 0,   0,    0,    0,   0,    0,    0,    0,    0,    0,    0,   0,    0},
        {0, 0, 0, 0, 0, 0.08, 0.21, 0.21, 0.22, 0.29, 0.36, 0.39, 0.37, 0.33, 0.26, 0.18, 0.09,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
        {0, 0, 0, 0, 0, 0, 0.03, 0.13, 0.19, 0.22, 0.24, 0.24, 0.23, 0.18, 0.13, 0.05, 0,
         0, 0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0, 0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.06, 0.08, 0.09, 0.07, 0.05, 0.01, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0,    0,    0,    0,    0,    0,    0,    0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    std::cout << this->tab.size() << '\n';
    static int count{0};
    for (auto test : this->tab) {
        std::cout << test.size() << '\n';
        std::cout << count << '\n';
        count++;
    }
    this->kernel = this->createKernel(13, 0.5, 0.15);
    this->mu = 0.15;
    this->sigma = 0.015;
    this->time = 0.1;
}

PLC::Lenia::Lenia(std::vector<std::vector<double>> tab_init)
{
    this->tab = std::move(tab_init);
    this->kernel = this->createKernel(13, 0.5, 0.15);
    this->mu = 0.15;
    this->sigma = 0.015;
    this->time = 0.1;
}

PLC::Lenia::Lenia(std::vector<std::vector<double>> tab_init, int R, double kernel_mu,
                  double kernel_sigma, double growth_mu, double growth_sigma)
{
    this->tab = std::move(tab_init);
    this->kernel = this->createKernel(R, kernel_mu, kernel_sigma);
    this->mu = growth_mu;
    this->sigma = growth_sigma;
    this->time = 0.1;
}

PLC::Lenia::Lenia(std::vector<std::vector<double>> tab_init,
                  std::vector<std::vector<double>> kernel_init, double time_init, double growth_mu,
                  double growth_sigma)
{
    this->tab = std::move(tab_init);
    this->kernel = std::move(kernel_init);
    this->mu = growth_mu;
    this->sigma = growth_sigma;
    this->time = time_init;
}

std::vector<PLC::Lenia> PLC::Lenia::activate(size_t nb_loop)
{
    std::vector<Lenia> result;

    for (size_t i = 0; i < nb_loop; ++i) {
        Lenia tmp(this->tab, this->kernel, this->mu, this->sigma, this->time);
        result.push_back(tmp);
        this->run();
    }
    return result;
}

void PLC::Lenia::run()
{
    std::vector<std::vector<double>> new_tab = this->tab;
    std::vector<std::vector<double>> u = this->calculate();
    std::vector<std::vector<double>> growth = this->growthLenia(u);
    for (size_t i = 0; i < new_tab.size(); ++i) {
        for (size_t j = 0; j < new_tab[j].size(); ++j) {
            new_tab[i][j] += this->time * growth[i][j];
            if (new_tab[i][j] < 0) {
                new_tab[i][j] = 0;
            }
            if (new_tab[i][j] > 1) {
                new_tab[i][j] = 1;
            }
        }
    }

    this->tab = new_tab;
}

void PLC::Lenia::show()
{
    // printMatrix(this->kernel);
    printMatrix(this->tab);
}

std::vector<std::vector<double>> PLC::Lenia::calculate()
{
    int rows = this->tab.size();
    int cols = this->tab[0].size();
    int kRows = this->kernel.size();
    int kCols = this->kernel[0].size();

    std::vector<std::vector<double>> output(rows, std::vector<double>(cols, 0.0));

    int kCenterX = kCols / 2;
    if (kCols % 2 == 0) {
        kCenterX -= 1;
    }
    int kCenterY = kRows / 2;
    if (kRows % 2 == 0) {
        kCenterY -= 1;
    }

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            double sum = 0.0;

            for (int m = 0; m < kRows; ++m) {
                for (int n = 0; n < kCols; ++n) {
                    int ii = (i + m - kCenterY + rows) % rows;
                    int jj = (j + n - kCenterX + cols) % cols;

                    sum += this->kernel[m][n] * this->tab[ii][jj];
                }
            }

            output[i][j] = sum;
        }
    }
    return output;
}

void PLC::Lenia::setTime(double new_time)
{
    this->time = new_time;
}

std::vector<std::vector<double>> PLC::Lenia::getTab()
{
    return this->tab;
}

std::vector<std::vector<double>> PLC::Lenia::getKernel()
{
    return this->kernel;
}

double PLC::Lenia::getMu()
{
    return this->mu;
}

double PLC::Lenia::getSigma()
{
    return this->sigma;
}

double PLC::Lenia::getTime()
{
    return this->time;
}
